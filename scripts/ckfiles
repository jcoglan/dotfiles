#!/bin/bash

set -eo pipefail

SUMCMD=shasum
INDEX_FILE=.shasum.txt
IGNORE_FILE=~/.ckignore

ignored_files=("$INDEX_FILE")
request_cmd=''
default_cmd=verify
cmd_args=()

# ------------------------------------------------------------------------
# Main interface
# ------------------------------------------------------------------------

main () {
  configure "$@"
  cmd-"${request_cmd:-$default_cmd}" "${cmd_args[@]}"
}

configure () {
  SUMCMD="$(find-shasum-cmd)"
  load-ignore-files

  while [[ $# -gt 0 ]] ; do
    case "$1" in
      -a | --add)
        set-command 'add'
        ;;
      -c | --check)
        set-command 'check'
        ;;
      -s | --status)
        set-command 'status'
        ;;
      -u | --unindexed)
        set-command 'unindexed'
        ;;
      -m | --missing)
        set-command 'missing'
        ;;
      -d | --diff)
        if [[ $# -lt 3 ]] ; then
          die 'usage: ckfiles --diff <source> <target>'
        fi
        set-command 'diff'
        cmd_args=("$2" "$3")
        shift 2
        ;;
      *)
        die "unrecognised input: $1"
        ;;
    esac
    shift
  done
}

# ------------------------------------------------------------------------
# Configuration functions
# ------------------------------------------------------------------------

find-shasum-cmd () {
  local candidates=(shasum sha1sum)
  local cmd

  case "$(uname -s)" in
    Linux)
      for cmd in "${candidates[@]}" ; do
        if hash "$cmd" 2> /dev/null ; then
          echo "$cmd"
          return
        fi
      done
      ;;
    Darwin)
      echo 'shasum'
      ;;
  esac
}

load-ignore-files () {
  local file

  if [[ -f "$IGNORE_FILE" ]] ; then
    while read -r file ; do
      ignored_files+=("$file")
    done < "$IGNORE_FILE"
  fi
}

set-command () {
  if [[ -z "$request_cmd" ]] ; then
    request_cmd="$1"
  else
    die "command was already set to: $request_cmd"
  fi
}

die () {
  echo "[!] $1" >&2
  exit 1
}

# ------------------------------------------------------------------------
# Status commands
# ------------------------------------------------------------------------

cmd-status () {
  if [[ ! -f "$INDEX_FILE" ]] ; then
    local indexable="$(indexable-files | count-lines)"

    echo 'No ckfiles index found'
    echo "indexable files: $indexable"
    return
  fi

  local file_mtime="$(file-modified "$INDEX_FILE")"
  local file_hash="$(file-hash "$INDEX_FILE")"

  local indexed="$(indexed-files | count-lines)"
  local unindexed="$(unindexed-files | count-lines)"
  local missing="$(missing-files | count-lines)"
  local stat

  echo 'ckfiles index file:'
  echo "    name:       $INDEX_FILE"
  echo "    modified:   $file_mtime"
  echo "    hash:       $file_hash"
  echo
  echo 'files:'
  for stat in indexed unindexed missing ; do
    printf "    %-10s %'10.f\n" "${stat}:" "${!stat}"
  done
  echo
}

file-hash () {
  $SUMCMD "$1" | awk '{ print $1 }'
}

file-modified () {
  local filename="$1"

  case "$(uname -s)" in
    Linux)
      stat -c '%y' "$filename" | cut -d. -f1
      ;;
    Darwin)
      local ts="$(stat -f '%m' "$filename")"
      date -r "$ts" '+%Y-%m-%d %H:%M:%S'
      ;;
  esac
}

count-lines () {
  tr '\0' '\n' | wc -l | awk '{ print $1 }'
}

cmd-unindexed () {
  unindexed-files
}

cmd-missing () {
  missing-files
}

# ------------------------------------------------------------------------
# Verification commands
# ------------------------------------------------------------------------

cmd-verify () {
  if [[ -f "$INDEX_FILE" ]] ; then
    cmd-check
    cmd-add
  else
    echo '==> creating new index'
    create-index
  fi
}

cmd-check () {
  if [[ ! -f "$INDEX_FILE" ]] ; then
    die 'no ckfiles index file present'
  fi

  local indexed="$(indexed-files | count-lines)"
  printf "==> checking index (%'.f files) ...\n" "$indexed"

  if ! check-index ; then
    die 'files do not match the index'
  fi
}

cmd-add () {
  local unindexed="$(unindexed-files | count-lines)"

  if [[ "$unindexed" -gt 0 ]] ; then
    printf "==> adding new files (%'.f files) ...\n" "$unindexed"
    update-index
  fi
}

# ------------------------------------------------------------------------
# Business logic
# ------------------------------------------------------------------------

create-index () {
  indexable-files | append-to-index
}

update-index () {
  unindexed-files | append-to-index
}

append-to-index () {
  tr '\n' '\0' | xargs -0 $SUMCMD --binary >> "$INDEX_FILE"
}

check-index () {
  $SUMCMD --check --warn --quiet "$INDEX_FILE"
}

all-files () {
  find . -type f -print0
}

indexable-files () {
  local ignore=()
  local name

  for name in "${ignored_files[@]}" ; do
    ignore+=(-name "$name" -prune -o)
  done

  find . "${ignore[@]}" -type f -print0
}

indexed-files () {
  if [[ -f "$INDEX_FILE" ]] ; then
    sed -E 's/^[^ ]+ +\*?//g' "$INDEX_FILE"
  fi
}

unindexed-files () {
  diff-file-lists indexable indexed
}

missing-files () {
  diff-file-lists indexed all
}

diff-file-lists () {
  local expect="$1"
  local actual="$2"

  diff <("$expect"-files | tr '\0' '\n' | sort) \
       <("$actual"-files | tr '\0' '\n' | sort) |
    grep -E '^<' |
    cut -c 3-
}

# ------------------------------------------------------------------------
# Diff command
# ------------------------------------------------------------------------

cmd-diff () {
  local src="$(resolve-index "$1")"
  local dst="$(resolve-index "$2")"
  local line

  echo
  echo "files unique to '$src':"
  echo

  unique-files "$src" "$dst" | while read -r line ; do
    echo "    - $line"
  done
}

resolve-index () {
  local arg="${1%/}"

  if [[ -f "$arg" ]] ; then
    echo "$arg"
  elif [[ -d "$arg" ]] ; then
    resolve-index "$arg/$INDEX_FILE"
  else
    die "could not find an index at: $arg"
  fi
}

unique-files () {
  local src="$1"
  local dst="$2"

  diff <(join      <(srt "$src") <(srt "$dst")) \
       <(join -a 1 <(srt "$src") <(srt "$dst")) |
    grep -E '^>' |
    sed -E 's/^> *[^ ]+ +\*?//g'
}

srt () {
  sort -bk '1,1' "$1"
}

main "$@"
