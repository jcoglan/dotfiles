#!/bin/bash

BACKUP_FILES=(
  ~/.bash_custom
  ~/.gnupg
  ~/.profile
  ~/.ssh
  ~/.vagrant.d
  ~/.zsh{env,rc}
  ~/Brewfile
  ~/Desktop
  ~/Documents
  ~/Downloads
  ~/projects
  ~/src
  ~/TODO.md
  ~/VirtualBox\ VMs
)

backup-add-file () {
  local file="$1"

  for entry in "${BACKUP_FILES[@]}"; do
    if [[ "$entry" == "$file" ]] ; then
      return
    fi
  done

  BACKUP_FILES+=("$file")
}

backup-rsync-home () {
  local target="$1"
  local files=()
  local file

  if [[ -z "$target" ]] ; then
    echo '[error] No destination given'
    return 1
  fi

  for file in "${BACKUP_FILES[@]}" ; do
    if [[ -e "$file" ]] ; then
      files+=("$file")
    fi
  done

  rsync -avP --delete "${files[@]}" "$target"
}

backup-rsync-macos-library () {
  local target="$1"

  if [[ -z "$target" ]] ; then
    echo '[error] No destination given'
    return 1
  fi

  rsync -avP --delete --delete-excluded --ignore-errors --sparse \
      --include 'Library/Application Scripts' \
      --include 'Library/Application Support' \
      --include 'Library/Containers' \
      --include 'Library/Preferences' \
      --include 'Library/Saved Application State' \
      --exclude 'Library/*' \
      ~/Library \
      "$target"
}

tar-down () {
  local host="$1"
  local src="$2"
  local dst="$3"

  ssh "$host" tar --sparse -czvf - "$src" | tar -xzf - -C "$dst"
}

tar-up () {
  local host="$1"
  local src="$2"
  local dst="$3"

  tar --sparse -czvf - "$src" | ssh "$host" tar -xzf - -C "$dst"
}

backup-github () {
  local target="$1"
  local name=''
  local url=''
  local dir=''

  github-repos | while read -r repo ; do
    name="${repo%,*}"
    url="${repo#*,}"

    dir="$target/$name.git"

    if [[ -d "$dir" ]] ; then
      cd "$dir"
      git fetch --prune --verbose origin
      cd -
    else
      mkdir -p "$(dirname "$dir")"
      git clone --mirror "$url" "$dir"
    fi
  done
}

GITHUB_REPO_URL='https://api.github.com/user/repos'

github-repos () {
  local page=1
  local response=''

  while :; do
    response="$(curl -s "$GITHUB_REPO_URL?page=$page" -H "Authorization: Bearer $GITHUB_TOKEN")"

    if [[ $(jq 'length' <<<"$response") -eq 0 ]] ; then
      return
    else
      jq -r 'map(.full_name + "," + .ssh_url)[]' <<<"$response"
      let page=page+1
    fi
  done
}
